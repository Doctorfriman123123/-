# -*- coding: utf-8 -*-
import datetime
import pickle
import os
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = "8067399638:AAEGVvs-cyW1jEAVw_8hrA5EFiYTrAtAV1A"
DAYS_OF_WEEK = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
DATA_FILE = "bot_data.pkl"

class StudentAssistantBot:
    def __init__(self):
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥
        self.schedule = {
            0: ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§—ñ–∑–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"],
            1: ["–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", "–Ü—Å—Ç–æ—Ä—ñ—è", "–§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞"],
            2: ["–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–•—ñ–º—ñ—è"],
            3: ["–§—ñ–∑–∏–∫–∞", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", "–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞"],
            4: ["–•—ñ–º—ñ—è", "–§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞", "–Ü—Å—Ç–æ—Ä—ñ—è"],
            5: [],
            6: []
        }
        self.custom_subjects = set()  # –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
        self.tasks = defaultdict(list)
        self.user_state = {}
        self.load_data()

    def save_data(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –±–æ—Ç–∞ —É —Ñ–∞–π–ª"""
        data = {
            'schedule': self.schedule,
            'custom_subjects': self.custom_subjects,
            'tasks': dict(self.tasks)
        }
        with open(DATA_FILE, 'wb') as f:
            pickle.dump(data, f)

    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –±–æ—Ç–∞ –∑ —Ñ–∞–π–ª—É"""
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'rb') as f:
                data = pickle.load(f)
                self.schedule = data.get('schedule', self.schedule)
                self.custom_subjects = data.get('custom_subjects', set())
                self.tasks = defaultdict(list, data.get('tasks', {}))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user = update.effective_user
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –Ø —Ç–≤—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/today - –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
            "/tomorrow - –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/add_task - –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "/tasks - –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "/add_subject - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç\n"
            "/help - –î–æ–≤—ñ–¥–∫–∞"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/today - –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä–æ–∑–∫–ª–∞–¥\n"
            "/tomorrow - –ó–∞–≤—Ç—Ä–∞—à–Ω—ñ–π —Ä–æ–∑–∫–ª–∞–¥\n"
            "/add_task - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "/tasks - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å\n"
            "/add_subject - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç\n"
            "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞"
        )

    async def add_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç"""
        await update.message.reply_text(
            "üìö –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:"
        )
        self.user_state[update.effective_user.id] = "waiting_for_subject"

    async def add_subject_finish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        new_subject = update.message.text.strip()
        if new_subject:
            self.custom_subjects.add(new_subject)
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{new_subject}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            self.save_data()
        else:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!")
        self.user_state.pop(update.effective_user.id, None)

    async def show_schedule(self, update: Update, day_offset: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å"""
        today = datetime.date.today()
        target_date = today + datetime.timedelta(days=day_offset)
        day_index = target_date.weekday()
        
        schedule_text = f"üìÖ {DAYS_OF_WEEK[day_index]} ({target_date.strftime('%d.%m.%Y')}):\n"
        if self.schedule[day_index]:
            for i, subject in enumerate(self.schedule[day_index], 1):
                schedule_text += f"{i}. {subject}\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
        if day_index in [0,1,2,3,4]:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
            for i, subject in enumerate(sorted(self.custom_subjects), len(self.schedule[day_index])+1):
                schedule_text += f"{i}. {subject} (–¥–æ–¥–∞—Ç–∫–æ–≤–∏–π)\n"
        
        if not self.schedule[day_index] and not self.custom_subjects:
            schedule_text += "üéâ –í—ñ–∫–µ–Ω–¥ –∞–±–æ –ø–∞—Ä –Ω–µ–º–∞—î!"
        
        await update.message.reply_text(schedule_text)

    async def today_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /today"""
        await self.show_schedule(update, 0)

    async def tomorrow_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /tomorrow"""
        await self.show_schedule(update, 1)

    async def add_task_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        await update.message.reply_text(
            "üìù –í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "<–ü—Ä–µ–¥–º–µ—Ç>, <–î–∞—Ç–∞ (–¥–¥.–º–º.—Ä—Ä—Ä—Ä)>, <–û–ø–∏—Å>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, 25.12.2023, –í–∏–∫–æ–Ω–∞—Ç–∏ —Å—Ç–æ—Ä. 45\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: {', '.join(sorted(self.custom_subjects))}"
        )
        self.user_state[update.effective_user.id] = "waiting_for_task"

    async def add_task_finish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        try:
            subject, date_str, description = [x.strip() for x in update.message.text.split(",", 2)]
            due_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
            self.tasks[due_date].append((subject, description))
            await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            self.save_data()
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ü—Ä–µ–¥–º–µ—Ç, –¥–∞—Ç–∞, –æ–ø–∏—Å")
        self.user_state.pop(update.effective_user.id, None)

    async def show_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        if not self.tasks:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å!")
            return
        
        tasks_text = "üìå –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n"
        for date in sorted(self.tasks.keys()):
            tasks_text += f"\nüìÖ {date.strftime('%d.%m.%Y')} ({DAYS_OF_WEEK[date.weekday()]}):\n"
            for i, (subject, desc) in enumerate(self.tasks[date], 1):
                tasks_text += f"{i}. {subject}: {desc}\n"
        await update.message.reply_text(tasks_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        user_id = update.effective_user.id
        if self.user_state.get(user_id) == "waiting_for_task":
            await self.add_task_finish(update, context)
        elif self.user_state.get(user_id) == "waiting_for_subject":
            await self.add_subject_finish(update, context)
        else:
            await update.message.reply_text("–ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ /help")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = StudentAssistantBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("today", bot.today_schedule))
    application.add_handler(CommandHandler("tomorrow", bot.tomorrow_schedule))
    application.add_handler(CommandHandler("add_task", bot.add_task_start))
    application.add_handler(CommandHandler("tasks", bot.show_tasks))
    application.add_handler(CommandHandler("add_subject", bot.add_subject))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()